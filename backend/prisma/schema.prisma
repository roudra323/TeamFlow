datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User Model
model User {
  id          Int          @id @default(autoincrement())
  name        String
  email       String       @unique
  password    String
  role        Role         @default(MEMBER)
  workspaces  Workspace[]  @relation("WorkspaceUsers")
  tasks       Task[]       @relation("UserTasks")
  comments    Comment[]
  attachments Attachment[] @relation("UploadedAttachments") // Define the relation to Attachment
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// Workspace Model
model Workspace {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  users       User[]   @relation("WorkspaceUsers")
  boards      Board[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Board Model
model Board {
  id          Int       @id @default(autoincrement())
  name        String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId Int
  tasks       Task[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Task Model
model Task {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  status      Status       @default(TODO)
  priority    Priority     @default(MEDIUM)
  dueDate     DateTime?
  board       Board        @relation(fields: [boardId], references: [id])
  boardId     Int
  assignee    User?        @relation("UserTasks", fields: [assigneeId], references: [id])
  assigneeId  Int?
  comments    Comment[]
  attachments Attachment[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// Comment Model
model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  task      Task     @relation(fields: [taskId], references: [id])
  taskId    Int
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Attachment Model
model Attachment {
  id           Int      @id @default(autoincrement())
  url          String
  filename     String
  task         Task     @relation(fields: [taskId], references: [id])
  taskId       Int
  uploadedBy   User     @relation("UploadedAttachments", fields: [uploadedById], references: [id]) // Correct relation with User
  uploadedById Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// Enum for User Roles
enum Role {
  ADMIN
  MEMBER
  VIEWER
}

// Enum for Task Status
enum Status {
  TODO
  IN_PROGRESS
  COMPLETED
}

// Enum for Task Priority
enum Priority {
  LOW
  MEDIUM
  HIGH
}
